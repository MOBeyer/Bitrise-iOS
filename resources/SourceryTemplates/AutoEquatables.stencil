// swiftlint:disable file_length

func compareDictionary(_ x: [String: Any], _ y: [String: Any]) -> Bool {
    if x.count != y.count { return false }

    for (k1, v1) in x {
        guard let v2 = y[k1] else { return false }
        if !compareAny(v1, v2) {
            return false
        }
    }

    return true
}

func compareArray(_ x: [Any], _ y: [Any]) -> Bool {
    if x.count != y.count { return false }

    for (i, _x) in x.enumerated() {
        if !compareAny(_x, y[i]) {
            return false
        }
    }
    return true
}

func compareAny(_ x: Any, _ y: Any) -> Bool {
    if let a = x as? Int, let b = y as? Int {
        return a == b
    }
    if let a = x as? String, let b = y as? String {
        return a == b
    }
    if let a = x as? [Any], let b = y as? [Any] {
        return compareArray(a, b)
    }
    if let a = x as? [String: Any], let b = y as? [String: Any] {
        return compareDictionary(a, b)
    }
    return false
}

fileprivate func compareOptionals<T>(lhs: T?, rhs: T?, compare: (_ lhs: T, _ rhs: T) -> Bool) -> Bool {
    switch (lhs, rhs) {
    case let (lValue?, rValue?):
        return compare(lValue, rValue)
    case (nil, nil):
        return true
    default:
        return false
    }
}

fileprivate func compareArrays<T>(lhs: [T], rhs: [T], compare: (_ lhs: T, _ rhs: T) -> Bool) -> Bool {
    guard lhs.count == rhs.count else { return false }
    for (idx, lhsItem) in lhs.enumerated() {
        guard compare(lhsItem, rhs[idx]) else { return false }
    }

    return true
}

// MARK: - AutoEquatable for classes, protocols, structs
{% for type in types.implementing.AutoEquatable %}{% if not type.kind == "enum" %}
// MARK: - {{ type.name }} AutoEquatable
{% if not type.kind == "protocol" %}extension {{ type.name }}: Equatable {} {% endif %}
{% if type.supertype.based.Equatable or type.supertype.implements.AutoEquatable %} THIS WONT COMPILE, WE DONT SUPPORT INHERITANCE for AutoEquatable {% endif %}
{{ type.accessLevel }} func == (lhs: {{ type.name }}, rhs: {{ type.name }}) -> Bool {
    {% for variable in type.storedVariables %}{% if not variable.isDictionary %}{% if not variable.annotations.skipEquality %}guard {% if not variable.isOptional %}{% if not variable.annotations.arrayEquality %}lhs.{{ variable.name }} == rhs.{{ variable.name }}{% else %}compareArrays(lhs: lhs.{{ variable.name }}, rhs: rhs.{{ variable.name }}, compare: ==){% endif %}{% else %}compareOptionals(lhs: lhs.{{ variable.name }}, rhs: rhs.{{ variable.name }}, compare: ==){% endif %}{% else %}compareAny(lhs.{{ variable.name }}, rhs.{{ variable.name }}) {% endif %} else { return false }{% endif %}
    {% endfor %}
    return true
}
{% endif %}
{% endfor %}

// MARK: - AutoEquatable for Enums
{% for type in types.implementing.AutoEquatable|enum %}
// MARK: - {{ type.name }} AutoEquatable
extension {{ type.name }}: Equatable {}
{{ type.accessLevel }} func == (lhs: {{ type.name }}, rhs: {{ type.name }}) -> Bool {
    switch (lhs, rhs) {
    {% for case in type.cases %}
    {% if case.hasAssociatedValue %}case (.{{ case.name }}(let lhs), .{{ case.name }}(let rhs)): {% else %} case (.{{ case.name }}, .{{ case.name }}): {% endif %}
        {% ifnot case.hasAssociatedValue %} return true {% else %}
        {% if case.associatedValues.count == 1 %}
        return lhs == rhs
        {% else %}
        {% for associated in case.associatedValues %}if lhs.{{ associated.externalName }} != rhs.{{ associated.externalName }} { return false }
        {% endfor %}return true
        {% endif %}
        {% endif %}
    {% endfor %}
    default: return false
    }
}
{% endfor %}

// MARK: -
